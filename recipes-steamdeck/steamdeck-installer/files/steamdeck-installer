#!/bin/bash
#
# Steam Deck System Installer
# Interactive installer for deploying system to internal SSD
#

set -e

# Configuration
INSTALLER_VERSION="1.0"
DIALOG_TITLE="Steam Deck System Installer v${INSTALLER_VERSION}"
WELCOME_FILE="/etc/steamdeck-installer/installer-welcome.txt"
INSTALL_SCRIPT="/usr/bin/steamdeck-install.sh"

# Colors for console output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[INSTALLER]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if we're running on Steam Deck
check_hardware() {
    if ! grep -q "Valve Jupiter" /sys/devices/virtual/dmi/id/product_name 2>/dev/null; then
        if ! dialog --title "$DIALOG_TITLE" --yesno \
            "This doesn't appear to be a Steam Deck.\n\nDo you want to continue anyway?" 8 50; then
            exit 1
        fi
    fi
}

# Welcome screen
show_welcome() {
    local welcome_text=""
    if [ -f "$WELCOME_FILE" ]; then
        welcome_text=$(cat "$WELCOME_FILE")
    else
        welcome_text="Welcome to Steam Deck System Installer!

This installer will:
• Detect your Steam Deck internal SSD
• Create proper partitions (EFI + root)
• Install optimized Linux system
• Configure bootloader
• Set up hardware drivers

WARNING: This will ERASE your internal SSD!
Make sure to backup important data first."
    fi

    dialog --title "$DIALOG_TITLE" --msgbox "$welcome_text" 20 70
}

# Detect target disk
detect_target_disk() {
    local disks=()
    local disk_info=()
    
    # Find NVME disks (Steam Deck internal storage)
    for disk in /dev/nvme*n1; do
        if [ -b "$disk" ]; then
            local size=$(lsblk -bndo SIZE "$disk" | head -1)
            local size_gb=$((size / 1024 / 1024 / 1024))
            local model=$(lsblk -ndo MODEL "$disk" | head -1)
            disks+=("$disk")
            disk_info+=("$disk - ${model} (${size_gb}GB)")
        fi
    done
    
    # Also check SATA disks
    for disk in /dev/sd[a-z]; do
        if [ -b "$disk" ] && [ "$disk" != "/dev/sda" ]; then  # Skip USB installer disk
            local size=$(lsblk -bndo SIZE "$disk" | head -1)
            local size_gb=$((size / 1024 / 1024 / 1024))
            local model=$(lsblk -ndo MODEL "$disk" | head -1)
            disks+=("$disk")
            disk_info+=("$disk - ${model} (${size_gb}GB)")
        fi
    done
    
    if [ ${#disks[@]} -eq 0 ]; then
        dialog --title "$DIALOG_TITLE" --msgbox \
            "No suitable target disks found!\n\nInstaller requires NVME or SATA disk." 8 50
        exit 1
    elif [ ${#disks[@]} -eq 1 ]; then
        TARGET_DISK="${disks[0]}"
        dialog --title "$DIALOG_TITLE" --yesno \
            "Target disk detected:\n${disk_info[0]}\n\nInstall to this disk?" 8 60
    else
        # Multiple disks - let user choose
        local choices=()
        for i in "${!disks[@]}"; do
            choices+=("${disks[i]}" "${disk_info[i]}")
        done
        
        TARGET_DISK=$(dialog --title "$DIALOG_TITLE" --menu \
            "Select target disk for installation:" 15 70 8 "${choices[@]}" 3>&1 1>&2 2>&3)
    fi
}

# Select installation type
select_installation_type() {
    INSTALL_TYPE=$(dialog --title "$DIALOG_TITLE" --menu \
        "Select installation type:" 12 60 4 \
        "minimal" "Minimal system (2GB, console only)" \
        "gaming" "Full gaming system (8GB, with Steam)" \
        "custom" "Custom installation (advanced)" 3>&1 1>&2 2>&3)
}

# Confirm installation
confirm_installation() {
    local disk_info=$(lsblk -o NAME,SIZE,MODEL "$TARGET_DISK" | head -2 | tail -1)
    
    dialog --title "$DIALOG_TITLE" --defaultno --yesno \
        "FINAL CONFIRMATION\n\nTarget: $TARGET_DISK\n$disk_info\nType: $INSTALL_TYPE\n\nThis will COMPLETELY ERASE the target disk!\n\nAre you absolutely sure?" 12 60
}

# Run installation
run_installation() {
    # Clear screen and show progress
    clear
    log "Starting Steam Deck installation..."
    log "Target: $TARGET_DISK"
    log "Type: $INSTALL_TYPE"
    echo
    
    # Run the actual installation script
    if "$INSTALL_SCRIPT" "$TARGET_DISK" "$INSTALL_TYPE"; then
        dialog --title "$DIALOG_TITLE" --msgbox \
            "Installation completed successfully!\n\nYou can now:\n• Remove the USB installer\n• Reboot to enjoy your new system\n\nPress OK to reboot." 10 50
        
        log "Installation successful! Rebooting in 5 seconds..."
        sleep 5
        reboot
    else
        dialog --title "$DIALOG_TITLE" --msgbox \
            "Installation failed!\n\nCheck the console output for details.\nThe system will not reboot automatically." 8 50
        exit 1
    fi
}

# Main installer flow
main() {
    # Check if dialog is available
    if ! command -v dialog >/dev/null 2>&1; then
        error "Dialog not available. Running in text mode..."
        exec "$INSTALL_SCRIPT" "$@"
    fi
    
    # Check hardware
    check_hardware
    
    # Show welcome
    show_welcome
    
    # Detect target disk
    detect_target_disk
    
    # Select installation type
    select_installation_type
    
    # Confirm installation
    if confirm_installation; then
        run_installation
    else
        log "Installation cancelled by user."
        exit 0
    fi
}

# Handle Ctrl+C
trap 'echo; log "Installation cancelled."; exit 1' INT

# Run main function
main "$@" 