#!/usr/bin/env python3
"""
Steam Deck Power Management Tool

This script handles Steam Deck power management, TDP control, and performance profiles.
"""

import sys
import subprocess
import os
import json
import time
from pathlib import Path

class SteamDeckPowerManager:
    def __init__(self):
        self.config_dir = Path("/etc/steamdeck")
        self.config_file = self.config_dir / "power.json"
        self.sysfs_paths = {
            "cpu_freq": "/sys/devices/system/cpu/cpu0/cpufreq",
            "gpu_freq": "/sys/class/drm/card1/device",
            "power_profile": "/sys/firmware/acpi/platform_profile"
        }
        self.ensure_config_dir()
    
    def ensure_config_dir(self):
        """Ensure configuration directory exists"""
        self.config_dir.mkdir(parents=True, exist_ok=True)
    
    def load_config(self):
        """Load power management configuration"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            except (json.JSONDecodeError, IOError):
                pass
        return self.get_default_config()
    
    def get_default_config(self):
        """Get default power management configuration"""
        return {
            "profiles": {
                "performance": {
                    "cpu_governor": "performance",
                    "cpu_max_freq": 3500000,
                    "gpu_power_cap": 15,
                    "tdp_limit": 15
                },
                "balanced": {
                    "cpu_governor": "schedutil",
                    "cpu_max_freq": 2800000,
                    "gpu_power_cap": 10,
                    "tdp_limit": 10
                },
                "powersave": {
                    "cpu_governor": "powersave",
                    "cpu_max_freq": 1600000,
                    "gpu_power_cap": 6,
                    "tdp_limit": 6
                }
            },
            "current_profile": "balanced",
            "auto_profile": True,
            "battery_thresholds": {
                "low": 20,
                "critical": 10
            }
        }
    
    def save_config(self, config):
        """Save power management configuration"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
            print(f"Configuration saved to {self.config_file}")
            return True
        except IOError as e:
            print(f"Error saving configuration: {e}")
            return False
    
    def get_battery_level(self):
        """Get current battery level"""
        try:
            with open("/sys/class/power_supply/BAT1/capacity", "r") as f:
                return int(f.read().strip())
        except (IOError, ValueError):
            return 100  # Default if unable to read
    
    def get_ac_adapter_status(self):
        """Check if AC adapter is connected"""
        try:
            with open("/sys/class/power_supply/ADP1/online", "r") as f:
                return f.read().strip() == "1"
        except IOError:
            return False
    
    def set_cpu_governor(self, governor):
        """Set CPU governor"""
        try:
            cpu_count = os.cpu_count()
            for cpu in range(cpu_count):
                governor_path = f"/sys/devices/system/cpu/cpu{cpu}/cpufreq/scaling_governor"
                if os.path.exists(governor_path):
                    with open(governor_path, "w") as f:
                        f.write(governor)
            print(f"CPU governor set to: {governor}")
            return True
        except (IOError, PermissionError) as e:
            print(f"Error setting CPU governor: {e}")
            return False
    
    def set_cpu_max_freq(self, max_freq):
        """Set maximum CPU frequency"""
        try:
            cpu_count = os.cpu_count()
            for cpu in range(cpu_count):
                max_freq_path = f"/sys/devices/system/cpu/cpu{cpu}/cpufreq/scaling_max_freq"
                if os.path.exists(max_freq_path):
                    with open(max_freq_path, "w") as f:
                        f.write(str(max_freq))
            print(f"CPU max frequency set to: {max_freq} Hz")
            return True
        except (IOError, PermissionError) as e:
            print(f"Error setting CPU max frequency: {e}")
            return False
    
    def apply_profile(self, profile_name):
        """Apply a power profile"""
        config = self.load_config()
        
        if profile_name not in config["profiles"]:
            print(f"Profile '{profile_name}' not found")
            return False
        
        profile = config["profiles"][profile_name]
        
        print(f"Applying power profile: {profile_name}")
        
        # Apply CPU settings
        if "cpu_governor" in profile:
            self.set_cpu_governor(profile["cpu_governor"])
        
        if "cpu_max_freq" in profile:
            self.set_cpu_max_freq(profile["cpu_max_freq"])
        
        # Update current profile in config
        config["current_profile"] = profile_name
        self.save_config(config)
        
        return True
    
    def auto_profile_management(self):
        """Automatic profile management based on power state"""
        config = self.load_config()
        
        if not config.get("auto_profile", True):
            return
        
        battery_level = self.get_battery_level()
        ac_connected = self.get_ac_adapter_status()
        
        current_profile = config.get("current_profile", "balanced")
        new_profile = current_profile
        
        if ac_connected:
            # On AC power, use performance profile
            new_profile = "performance"
        else:
            # On battery, choose profile based on battery level
            if battery_level <= config["battery_thresholds"]["critical"]:
                new_profile = "powersave"
            elif battery_level <= config["battery_thresholds"]["low"]:
                new_profile = "balanced"
            else:
                new_profile = "balanced"
        
        if new_profile != current_profile:
            print(f"Auto-switching from {current_profile} to {new_profile}")
            self.apply_profile(new_profile)
    
    def show_status(self):
        """Display current power management status"""
        config = self.load_config()
        battery_level = self.get_battery_level()
        ac_connected = self.get_ac_adapter_status()
        
        print("Steam Deck Power Management Status:")
        print(f"  Current Profile: {config.get('current_profile', 'unknown')}")
        print(f"  Battery Level: {battery_level}%")
        print(f"  AC Adapter: {'Connected' if ac_connected else 'Disconnected'}")
        print(f"  Auto Profile: {'Enabled' if config.get('auto_profile', True) else 'Disabled'}")
    
    def monitor_power(self):
        """Monitor power status and apply automatic profile management"""
        print("Starting power monitoring service...")
        
        while True:
            try:
                self.auto_profile_management()
                time.sleep(30)  # Check every 30 seconds
            except KeyboardInterrupt:
                print("\nPower monitoring stopped")
                break
            except Exception as e:
                print(f"Error in power monitoring: {e}")
                time.sleep(60)  # Wait longer on error

def print_usage():
    """Print usage information"""
    print("Steam Deck Power Management Tool")
    print("Usage: steamdeck-power-management [COMMAND] [OPTIONS]")
    print("")
    print("Commands:")
    print("  status         - Show current power status")
    print("  profile NAME   - Apply power profile (performance/balanced/powersave)")
    print("  monitor        - Run power monitoring service")
    print("  help           - Show this help message")

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print_usage()
        return 1
    
    command = sys.argv[1].lower()
    power_manager = SteamDeckPowerManager()
    
    if command == "status":
        power_manager.show_status()
    elif command == "profile":
        if len(sys.argv) < 3:
            print("Error: Profile name required")
            print("Available profiles: performance, balanced, powersave")
            return 1
        profile_name = sys.argv[2].lower()
        if not power_manager.apply_profile(profile_name):
            return 1
    elif command == "monitor":
        power_manager.monitor_power()
    elif command == "help":
        print_usage()
    else:
        print(f"Unknown command: {command}")
        print_usage()
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 