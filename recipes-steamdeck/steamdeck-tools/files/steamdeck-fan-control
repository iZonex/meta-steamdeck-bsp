#!/usr/bin/env python3
"""
Steam Deck Fan Control Service
Manages fan speed based on CPU/GPU temperature
"""

import time
import os
import sys
import signal
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SteamDeckFanControl:
    def __init__(self):
        self.running = True
        self.fan_path = "/sys/class/hwmon/hwmon1/pwm1"
        self.temp_paths = [
            "/sys/class/thermal/thermal_zone0/temp",
            "/sys/class/thermal/thermal_zone1/temp"
        ]
        
    def read_temperature(self):
        """Read current temperature from thermal zones"""
        max_temp = 0
        for path in self.temp_paths:
            try:
                with open(path, 'r') as f:
                    temp = int(f.read().strip()) / 1000  # Convert from millicelsius
                    max_temp = max(max_temp, temp)
            except (IOError, ValueError):
                continue
        return max_temp
        
    def set_fan_speed(self, speed):
        """Set fan speed (0-255)"""
        try:
            with open(self.fan_path, 'w') as f:
                f.write(str(speed))
            logger.debug(f"Set fan speed to {speed}")
        except IOError as e:
            logger.error(f"Failed to set fan speed: {e}")
            
    def calculate_fan_speed(self, temp):
        """Calculate fan speed based on temperature"""
        if temp < 40:
            return 50   # Minimum speed
        elif temp < 60:
            return int(50 + (temp - 40) * 5)  # Linear increase
        elif temp < 80:
            return int(150 + (temp - 60) * 5)  # Faster increase
        else:
            return 255  # Maximum speed
            
    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        logger.info("Received shutdown signal")
        self.running = False
        
    def run(self):
        """Main control loop"""
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        logger.info("Starting Steam Deck fan control service")
        
        while self.running:
            temp = self.read_temperature()
            fan_speed = self.calculate_fan_speed(temp)
            self.set_fan_speed(fan_speed)
            
            logger.debug(f"Temperature: {temp}Â°C, Fan speed: {fan_speed}")
            time.sleep(5)  # Check every 5 seconds
            
        logger.info("Fan control service stopped")

if __name__ == "__main__":
    controller = SteamDeckFanControl()
    controller.run() 