#!/bin/bash
#
# Steam Deck Recovery System
# Emergency recovery and dual boot management
#

set -e

VERSION="1.0.0"
RECOVERY_MOUNT="/mnt/recovery"
BACKUP_DIR="/recovery/backups"
LOG_FILE="/var/log/steamdeck-recovery.log"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Logging
log() {
    local level="$1"
    shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*" | tee -a "$LOG_FILE"
}

info() { log "INFO" "$@"; }
warn() { log "WARN" "$@"; }
error() { log "ERROR" "$@"; }
success() { log "SUCCESS" "$@"; }

# Get partition information
get_partition_info() {
    local target_disk=$(lsblk -ndo NAME,TYPE | grep disk | head -1 | cut -d' ' -f1)
    if [[ "$target_disk" =~ "nvme" ]]; then
        DISK_PREFIX="/dev/${target_disk}p"
    else
        DISK_PREFIX="/dev/${target_disk}"
    fi
    
    # Define partition layout
    EFI_PART="${DISK_PREFIX}1"
    ROOT_A_PART="${DISK_PREFIX}2"
    ROOT_B_PART="${DISK_PREFIX}3"
    SWAP_PART="${DISK_PREFIX}4"
    RECOVERY_PART="${DISK_PREFIX}5"
    DATA_PART="${DISK_PREFIX}6"
    STEAMOS_PART="${DISK_PREFIX}7"  # Optional SteamOS partition
}

# Mount recovery partition
mount_recovery() {
    if ! mountpoint -q "$RECOVERY_MOUNT"; then
        mkdir -p "$RECOVERY_MOUNT"
        mount "$RECOVERY_PART" "$RECOVERY_MOUNT" || return 1
    fi
    return 0
}

# Unmount recovery partition
umount_recovery() {
    if mountpoint -q "$RECOVERY_MOUNT"; then
        umount "$RECOVERY_MOUNT"
    fi
}

# Create system backup
create_backup() {
    local slot="${1:-current}"
    local backup_name="${2:-$(date +%Y%m%d_%H%M%S)}"
    
    info "Creating backup of slot $slot..."
    
    if ! mount_recovery; then
        error "Cannot mount recovery partition"
        return 1
    fi
    
    # Determine source partition
    local source_part
    if [ "$slot" = "current" ]; then
        source_part=$(findmnt -n -o SOURCE /)
    elif [ "$slot" = "a" ]; then
        source_part="$ROOT_A_PART"
    elif [ "$slot" = "b" ]; then
        source_part="$ROOT_B_PART"
    else
        error "Invalid slot: $slot"
        return 1
    fi
    
    # Create backup directory
    local backup_path="$RECOVERY_MOUNT/backups/slot_${slot}_${backup_name}"
    mkdir -p "$backup_path"
    
    # Mount source if not current
    local temp_mount=""
    if [ "$slot" != "current" ]; then
        temp_mount="/mnt/backup-source"
        mkdir -p "$temp_mount"
        mount "$source_part" "$temp_mount"
        source_dir="$temp_mount"
    else
        source_dir="/"
    fi
    
    info "Creating compressed backup to $backup_path"
    
    # Create backup with progress
    tar -czf "$backup_path/rootfs.tar.gz" \
        --exclude="$source_dir/proc/*" \
        --exclude="$source_dir/sys/*" \
        --exclude="$source_dir/dev/*" \
        --exclude="$source_dir/mnt/*" \
        --exclude="$source_dir/tmp/*" \
        --exclude="$source_dir/run/*" \
        --exclude="$source_dir/var/log/*" \
        --exclude="$source_dir/var/cache/*" \
        -C "$source_dir" . &
    
    local tar_pid=$!
    
    # Show progress
    while kill -0 $tar_pid 2>/dev/null; do
        printf "."
        sleep 1
    done
    wait $tar_pid
    local tar_result=$?
    
    echo ""  # New line after progress dots
    
    # Cleanup temp mount
    if [ -n "$temp_mount" ]; then
        umount "$temp_mount"
        rmdir "$temp_mount"
    fi
    
    if [ $tar_result -eq 0 ]; then
        # Create metadata
        cat > "$backup_path/metadata.json" << EOF
{
    "created": "$(date -Iseconds)",
    "slot": "$slot",
    "hostname": "$(hostname)",
    "kernel": "$(uname -r)",
    "size": $(stat -c%s "$backup_path/rootfs.tar.gz")
}
EOF
        success "Backup created: $backup_path"
        umount_recovery
        return 0
    else
        error "Backup failed"
        rm -rf "$backup_path"
        umount_recovery
        return 1
    fi
}

# List available backups
list_backups() {
    info "Available backups:"
    
    if ! mount_recovery; then
        error "Cannot mount recovery partition"
        return 1
    fi
    
    if [ ! -d "$RECOVERY_MOUNT/backups" ]; then
        info "No backups found"
        umount_recovery
        return 0
    fi
    
    echo ""
    printf "%-20s %-10s %-20s %-10s\n" "Name" "Slot" "Created" "Size"
    echo "================================================================="
    
    for backup_dir in "$RECOVERY_MOUNT/backups"/*; do
        if [ -d "$backup_dir" ] && [ -f "$backup_dir/metadata.json" ]; then
            local name=$(basename "$backup_dir")
            local slot=$(jq -r '.slot' "$backup_dir/metadata.json")
            local created=$(jq -r '.created' "$backup_dir/metadata.json" | cut -d'T' -f1)
            local size=$(jq -r '.size' "$backup_dir/metadata.json")
            local size_mb=$((size / 1024 / 1024))
            
            printf "%-20s %-10s %-20s %-10s\n" "$name" "$slot" "$created" "${size_mb}MB"
        fi
    done
    
    umount_recovery
}

# Restore from backup
restore_backup() {
    local backup_name="$1"
    local target_slot="${2:-a}"
    
    if [ -z "$backup_name" ]; then
        error "Usage: restore_backup <backup_name> [target_slot]"
        return 1
    fi
    
    info "Restoring backup $backup_name to slot $target_slot..."
    
    if ! mount_recovery; then
        error "Cannot mount recovery partition"
        return 1
    fi
    
    local backup_path="$RECOVERY_MOUNT/backups/$backup_name"
    
    if [ ! -d "$backup_path" ] || [ ! -f "$backup_path/rootfs.tar.gz" ]; then
        error "Backup not found: $backup_name"
        umount_recovery
        return 1
    fi
    
    # Determine target partition
    local target_part
    if [ "$target_slot" = "a" ]; then
        target_part="$ROOT_A_PART"
    elif [ "$target_slot" = "b" ]; then
        target_part="$ROOT_B_PART"
    else
        error "Invalid target slot: $target_slot"
        umount_recovery
        return 1
    fi
    
    # Format target partition
    info "Formatting target partition $target_part..."
    mkfs.ext4 -F -L "rootfs-$target_slot" "$target_part"
    
    # Mount target
    local restore_mount="/mnt/restore-target"
    mkdir -p "$restore_mount"
    mount "$target_part" "$restore_mount"
    
    # Restore backup
    info "Restoring files..."
    tar -xzf "$backup_path/rootfs.tar.gz" -C "$restore_mount" &
    
    local tar_pid=$!
    
    # Show progress
    while kill -0 $tar_pid 2>/dev/null; do
        printf "."
        sleep 1
    done
    wait $tar_pid
    local tar_result=$?
    
    echo ""  # New line after progress dots
    
    # Update fstab for target slot
    cat > "$restore_mount/etc/fstab" << EOF
# Steam Deck A/B system fstab
LABEL=rootfs-$target_slot / ext4 defaults,noatime 0 1
LABEL=shared-efi /boot vfat defaults,noatime 0 2
LABEL=shared-swap none swap sw 0 0
LABEL=shared-data /home/deck ext4 defaults,noatime 0 2
EOF
    
    # Cleanup
    umount "$restore_mount"
    rmdir "$restore_mount"
    umount_recovery
    
    if [ $tar_result -eq 0 ]; then
        success "Backup restored to slot $target_slot"
        return 0
    else
        error "Restore failed"
        return 1
    fi
}

# Detect SteamOS installation
detect_steamos() {
    info "Detecting existing SteamOS installation..."
    
    # Check for SteamOS specific files and partitions
    for part in $(lsblk -nlo NAME,LABEL | grep -E "(home|rootfs)" | cut -d' ' -f1); do
        local mount_point="/mnt/steamos-check"
        mkdir -p "$mount_point"
        
        if mount "/dev/$part" "$mount_point" 2>/dev/null; then
            if [ -f "$mount_point/etc/os-release" ]; then
                if grep -q "SteamOS" "$mount_point/etc/os-release"; then
                    local version=$(grep VERSION_ID "$mount_point/etc/os-release" | cut -d'"' -f2)
                    success "Found SteamOS $version on /dev/$part"
                    umount "$mount_point"
                    rmdir "$mount_point"
                    echo "/dev/$part"
                    return 0
                fi
            fi
            umount "$mount_point"
        fi
        rmdir "$mount_point" 2>/dev/null || true
    done
    
    info "No SteamOS installation detected"
    return 1
}

# Setup dual boot with SteamOS
setup_dual_boot() {
    info "Setting up dual boot with SteamOS..."
    
    local steamos_part
    steamos_part=$(detect_steamos)
    
    if [ -z "$steamos_part" ]; then
        warn "No SteamOS installation found"
        read -p "Do you want to proceed with single boot setup? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            info "Dual boot setup cancelled"
            return 0
        fi
        return 0
    fi
    
    # Create boot entries for both systems
    info "Creating dual boot configuration..."
    
    # SteamOS boot entry
    cat > "/boot/loader/entries/steamos.conf" << EOF
title SteamOS
linux /vmlinuz-steamos
initrd /initramfs-steamos
options root=$steamos_part rw quiet loglevel=3 systemd.unified_cgroup_hierarchy=0 steamos
EOF
    
    # Current system boot entries
    local current_slot=$(cat /etc/steamdeck-ab/current-slot 2>/dev/null || echo "a")
    
    cat > "/boot/loader/entries/steamdeck-a.conf" << EOF
title Steam Deck Linux (Slot A)
linux /vmlinuz-*
initrd /initramfs-*
options root=LABEL=rootfs-a rw quiet splash plymouth.ignore-serial-consoles
EOF
    
    cat > "/boot/loader/entries/steamdeck-b.conf" << EOF
title Steam Deck Linux (Slot B)
linux /vmlinuz-*
initrd /initramfs-*
options root=LABEL=rootfs-b rw quiet splash plymouth.ignore-serial-consoles
EOF
    
    # Update main loader config
    cat > "/boot/loader/loader.conf" << EOF
default steamdeck-$current_slot.conf
timeout 10
console-mode max
editor no
EOF
    
    success "Dual boot configured successfully"
    info "Boot menu will show:"
    info "  - Steam Deck Linux (Slot A/B)"
    info "  - SteamOS"
    info "  - Timeout: 10 seconds"
}

# Emergency repair
emergency_repair() {
    echo -e "${RED}Emergency Repair Mode${NC}"
    echo "====================="
    echo ""
    
    info "Running system diagnostics..."
    
    # Check filesystems
    echo "Checking filesystems:"
    get_partition_info
    
    for part in "$ROOT_A_PART" "$ROOT_B_PART" "$RECOVERY_PART" "$DATA_PART"; do
        if [ -b "$part" ]; then
            echo -n "  $(basename $part): "
            if fsck -n "$part" >/dev/null 2>&1; then
                echo -e "${GREEN}OK${NC}"
            else
                echo -e "${RED}ERRORS FOUND${NC}"
                read -p "    Repair filesystem on $part? (y/N): " -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    fsck -y "$part"
                fi
            fi
        fi
    done
    
    # Check boot configuration
    echo ""
    echo "Checking boot configuration:"
    if [ -f "/boot/loader/loader.conf" ]; then
        echo -e "  Boot loader: ${GREEN}OK${NC}"
    else
        echo -e "  Boot loader: ${RED}MISSING${NC}"
        warn "Boot configuration needs repair"
    fi
    
    # Offer repair options
    echo ""
    echo "Available repair options:"
    echo "1. Rebuild boot configuration"
    echo "2. Restore from backup"
    echo "3. Factory reset slot"
    echo "4. Setup dual boot"
    echo "5. Exit"
    
    read -p "Select option (1-5): " choice
    
    case $choice in
        1)
            info "Rebuilding boot configuration..."
            steamdeck-ab-manager status
            ;;
        2)
            list_backups
            echo ""
            read -p "Enter backup name to restore: " backup_name
            if [ -n "$backup_name" ]; then
                restore_backup "$backup_name"
            fi
            ;;
        3)
            read -p "Reset which slot (a/b)? " slot
            if [[ "$slot" =~ ^[ab]$ ]]; then
                warn "This will completely erase slot $slot!"
                read -p "Continue? (y/N): " -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    steamdeck-ab-manager prepare-update
                fi
            fi
            ;;
        4)
            setup_dual_boot
            ;;
        5)
            info "Exiting repair mode"
            ;;
        *)
            warn "Invalid option"
            ;;
    esac
}

# Interactive recovery menu
interactive_menu() {
    while true; do
        clear
        echo -e "${PURPLE}Steam Deck Recovery System${NC}"
        echo "=========================="
        echo ""
        echo "System Status:"
        steamdeck-ab-manager status | head -10
        echo ""
        echo "Recovery Options:"
        echo "1. Create backup"
        echo "2. List backups"
        echo "3. Restore from backup"
        echo "4. Setup dual boot"
        echo "5. Emergency repair"
        echo "6. System information"
        echo "7. Exit"
        echo ""
        
        read -p "Select option (1-7): " choice
        
        case $choice in
            1)
                echo ""
                read -p "Backup current system? (Y/n): " -r
                if [[ ! $REPLY =~ ^[Nn]$ ]]; then
                    create_backup
                fi
                read -p "Press Enter to continue..."
                ;;
            2)
                echo ""
                list_backups
                read -p "Press Enter to continue..."
                ;;
            3)
                echo ""
                list_backups
                echo ""
                read -p "Enter backup name to restore: " backup_name
                if [ -n "$backup_name" ]; then
                    read -p "Restore to slot (a/b): " slot
                    if [[ "$slot" =~ ^[ab]$ ]]; then
                        restore_backup "$backup_name" "$slot"
                    fi
                fi
                read -p "Press Enter to continue..."
                ;;
            4)
                echo ""
                setup_dual_boot
                read -p "Press Enter to continue..."
                ;;
            5)
                echo ""
                emergency_repair
                read -p "Press Enter to continue..."
                ;;
            6)
                echo ""
                echo "System Information:"
                echo "=================="
                uname -a
                echo ""
                lsblk
                echo ""
                df -h
                read -p "Press Enter to continue..."
                ;;
            7)
                echo "Exiting recovery system..."
                break
                ;;
            *)
                echo "Invalid option. Press Enter to continue..."
                read
                ;;
        esac
    done
}

# Main command handling
get_partition_info

case "${1:-menu}" in
    "backup")
        create_backup "${2:-current}" "$3"
        ;;
    
    "restore")
        restore_backup "$2" "$3"
        ;;
    
    "list")
        list_backups
        ;;
    
    "dual-boot")
        setup_dual_boot
        ;;
    
    "repair")
        emergency_repair
        ;;
    
    "detect-steamos")
        detect_steamos
        ;;
    
    "menu"|"")
        interactive_menu
        ;;
    
    "version")
        echo "steamdeck-recovery version $VERSION"
        ;;
    
    *)
        echo "Usage: $0 {backup|restore|list|dual-boot|repair|detect-steamos|menu|version}"
        echo ""
        echo "Commands:"
        echo "  backup [slot] [name] - Create backup of system"
        echo "  restore <name> [slot] - Restore from backup"
        echo "  list                 - List available backups"
        echo "  dual-boot           - Setup dual boot with SteamOS"
        echo "  repair              - Emergency repair mode"
        echo "  detect-steamos      - Detect existing SteamOS"
        echo "  menu                - Interactive menu (default)"
        echo "  version             - Show version information"
        exit 1
        ;;
esac 